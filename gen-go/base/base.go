// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package base

import (
	"bytes"
	"reflect"
	"database/sql/driver"
	"errors"
	"context"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

type StatusCode int64
const (
  StatusCode_OK StatusCode = 0
  StatusCode_NOK StatusCode = 1
)

func (p StatusCode) String() string {
  switch p {
  case StatusCode_OK: return "OK"
  case StatusCode_NOK: return "NOK"
  }
  return "<UNSET>"
}

func StatusCodeFromString(s string) (StatusCode, error) {
  switch s {
  case "OK": return StatusCode_OK, nil 
  case "NOK": return StatusCode_NOK, nil 
  }
  return StatusCode(0), fmt.Errorf("not a valid StatusCode string")
}


func StatusCodePtr(v StatusCode) *StatusCode { return &v }

func (p StatusCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *StatusCode) UnmarshalText(text []byte) error {
q, err := StatusCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *StatusCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = StatusCode(v)
return nil
}

func (p * StatusCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type InternalErrorCode int64
const (
  InternalErrorCode_GENERIC_ERROR InternalErrorCode = 0
  InternalErrorCode_INVALID_RETURN_TYPE InternalErrorCode = 1
)

func (p InternalErrorCode) String() string {
  switch p {
  case InternalErrorCode_GENERIC_ERROR: return "GENERIC_ERROR"
  case InternalErrorCode_INVALID_RETURN_TYPE: return "INVALID_RETURN_TYPE"
  }
  return "<UNSET>"
}

func InternalErrorCodeFromString(s string) (InternalErrorCode, error) {
  switch s {
  case "GENERIC_ERROR": return InternalErrorCode_GENERIC_ERROR, nil 
  case "INVALID_RETURN_TYPE": return InternalErrorCode_INVALID_RETURN_TYPE, nil 
  }
  return InternalErrorCode(0), fmt.Errorf("not a valid InternalErrorCode string")
}


func InternalErrorCodePtr(v InternalErrorCode) *InternalErrorCode { return &v }

func (p InternalErrorCode) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *InternalErrorCode) UnmarshalText(text []byte) error {
q, err := InternalErrorCodeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *InternalErrorCode) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = InternalErrorCode(v)
return nil
}

func (p * InternalErrorCode) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type Timestamp int32

func TimestampPtr(v Timestamp) *Timestamp { return &v }

// Attributes:
//  - Msg
type ServiceCallUnavailable struct {
  Msg *string `thrift:"msg,1" db:"msg" json:"msg,omitempty"`
}

func NewServiceCallUnavailable() *ServiceCallUnavailable {
  return &ServiceCallUnavailable{}
}

var ServiceCallUnavailable_Msg_DEFAULT string
func (p *ServiceCallUnavailable) GetMsg() string {
  if !p.IsSetMsg() {
    return ServiceCallUnavailable_Msg_DEFAULT
  }
return *p.Msg
}
func (p *ServiceCallUnavailable) IsSetMsg() bool {
  return p.Msg != nil
}

func (p *ServiceCallUnavailable) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ServiceCallUnavailable)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Msg = &v
}
  return nil
}

func (p *ServiceCallUnavailable) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ServiceCallUnavailable"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ServiceCallUnavailable) writeField1(oprot thrift.TProtocol) (err error) {
  if p.IsSetMsg() {
    if err := oprot.WriteFieldBegin("msg", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:msg: ", p), err) }
    if err := oprot.WriteString(string(*p.Msg)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.msg (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:msg: ", p), err) }
  }
  return err
}

func (p *ServiceCallUnavailable) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ServiceCallUnavailable(%+v)", *p)
}

func (p *ServiceCallUnavailable) Error() string {
  return p.String()
}

// Attributes:
//  - ErrorCode
//  - Message
type InternalError struct {
  ErrorCode InternalErrorCode `thrift:"error_code,1" db:"error_code" json:"error_code"`
  Message string `thrift:"message,2" db:"message" json:"message"`
}

func NewInternalError() *InternalError {
  return &InternalError{}
}


func (p *InternalError) GetErrorCode() InternalErrorCode {
  return p.ErrorCode
}

func (p *InternalError) GetMessage() string {
  return p.Message
}
func (p *InternalError) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *InternalError)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := InternalErrorCode(v)
  p.ErrorCode = temp
}
  return nil
}

func (p *InternalError)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *InternalError) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("InternalError"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *InternalError) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("error_code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:error_code: ", p), err) }
  if err := oprot.WriteI32(int32(p.ErrorCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.error_code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:error_code: ", p), err) }
  return err
}

func (p *InternalError) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("message", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
  if err := oprot.WriteString(string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  return err
}

func (p *InternalError) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("InternalError(%+v)", *p)
}

func (p *InternalError) Error() string {
  return p.String()
}

